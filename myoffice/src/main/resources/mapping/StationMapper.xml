<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.myoffice.dao.StationMapper">
	<cache></cache>
  <resultMap id="BaseResultMap" type="com.neuedu.myoffice.entity.Station">
    <constructor>
      <idArg column="id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="number" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, name, type, number
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap" useCache="true">
    select 
    <include refid="Base_Column_List" />
    from station
    where id = #{id,jdbcType=VARCHAR}
  </select>
   <select id="selectAll" resultMap="BaseResultMap" useCache="true">
    select 
    <include refid="Base_Column_List" />
    from station
  </select>
  <select id="findByCondition"  resultMap="BaseResultMap" useCache="true">
    select 
    <include refid="Base_Column_List" />
    from station
    <where>
    <if test = "id != null">
    	and id like concat('%',#{id},'%')
    </if>
    <if test = "name != null">
    	and name like concat('%',#{name},'%')
    </if>
    <if test = "type != null">
    	and type like concat('%',#{type},'%')
    </if>
    </where>
    order by id asc
  </select>
  <delete id="batchDelete" parameterType="java.lang.String" flushCache="true">
    delete from station
    where id in
    <foreach item="item" collection="array" open="(" separator="," close=")">
    #{item}
    </foreach>
  </delete>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" flushCache="true">
    delete from station
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.neuedu.myoffice.entity.Station" flushCache="true">
    insert into station (id, name, type, 
      number)
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{number,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.myoffice.entity.Station"
  useGeneratedKeys="true" keyColumn="id" keyProperty="id" flushCache="true">
    insert into station
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="number != null">
        number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.myoffice.entity.Station" flushCache="true">
    update station
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.myoffice.entity.Station" flushCache="true">
    update station
    set name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>